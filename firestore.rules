rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user owns the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Helper function to check if users are connected (following each other or have conversation)
    function areConnected(userId1, userId2) {
      return isAuthenticated() && (
        exists(/databases/$(database)/documents/conversations/$(userId1 + '_' + userId2)) ||
        exists(/databases/$(database)/documents/conversations/$(userId2 + '_' + userId1)) ||
        exists(/databases/$(database)/documents/matches/$(userId1 + '_' + userId2)) ||
        exists(/databases/$(database)/documents/matches/$(userId2 + '_' + userId1))
      );
    }
    
    // Users collection - Profile data
    match /users/{userId} {
      // Anyone authenticated can read user profiles (for discovery)
      allow read: if isAuthenticated();
      
      // Only the user can update their own profile
      allow write: if isOwner(userId);
      
      // Subcollection for user's private data
      match /private/{document=**} {
        allow read, write: if isOwner(userId);
      }
    }
    
    // Calls collection - Video/Audio calling
    match /calls/{userId} {
      // User can read their own call data
      allow read: if isOwner(userId);
      
      // Allow write if:
      // 1. User is the owner (receiving/ending call)
      // 2. User is initiating a call to this user
      // 3. Users have an existing connection
      allow write: if isOwner(userId) || 
        (isAuthenticated() && 
         resource == null && // New document
         request.resource.data.receiverId == userId &&
         request.resource.data.callerId == request.auth.uid) ||
        (isAuthenticated() && 
         resource != null && // Updating existing
         (resource.data.callerId == request.auth.uid || 
          resource.data.receiverId == request.auth.uid));
      
      // Allow delete for call cleanup
      allow delete: if isOwner(userId) ||
        (resource != null && 
         (resource.data.callerId == request.auth.uid || 
          resource.data.receiverId == request.auth.uid));
    }
    
    // Conversations collection - Chat messages
    match /conversations/{conversationId} {
      // Allow read if user is part of the conversation
      allow read: if isAuthenticated() && 
        request.auth.uid in resource.data.participants;
      
      // Allow create if user is authenticated and is a participant
      allow create: if isAuthenticated() && 
        request.auth.uid in request.resource.data.participants;
      
      // Allow update if user is a participant
      allow update: if isAuthenticated() && 
        request.auth.uid in resource.data.participants;
      
      // Messages subcollection
      match /messages/{messageId} {
        // Allow read if user can read the conversation
        allow read: if isAuthenticated() && 
          request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
        
        // Allow write if user is a participant and is the sender
        allow create: if isAuthenticated() && 
          request.resource.data.senderId == request.auth.uid &&
          request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
        
        // Allow update only for read receipts
        allow update: if isAuthenticated() && 
          request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isRead', 'readAt']);
      }
    }
    
    // Matches collection - User connections
    match /matches/{matchId} {
      // Users can read their matches
      allow read: if isAuthenticated() && 
        (resource.data.users[request.auth.uid] == true ||
         request.auth.uid in resource.data.userIds);
      
      // Users can create matches they're part of
      allow create: if isAuthenticated() && 
        (request.resource.data.users[request.auth.uid] == true ||
         request.auth.uid in request.resource.data.userIds);
      
      // Users can update their match status
      allow update: if isAuthenticated() && 
        (resource.data.users[request.auth.uid] == true ||
         request.auth.uid in resource.data.userIds);
    }
    
    // Posts collection - User posts/stories
    match /posts/{postId} {
      // Anyone authenticated can read posts (public feed)
      allow read: if isAuthenticated();
      
      // Only post owner can write
      allow write: if isAuthenticated() && 
        (request.resource.data.userId == request.auth.uid ||
         resource.data.userId == request.auth.uid);
      
      // Allow delete by owner
      allow delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
        
      // Comments subcollection
      match /comments/{commentId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() && 
          request.resource.data.userId == request.auth.uid;
        allow update, delete: if isAuthenticated() && 
          resource.data.userId == request.auth.uid;
      }
      
      // Likes subcollection
      match /likes/{likeId} {
        allow read: if isAuthenticated();
        allow write: if isAuthenticated() && likeId == request.auth.uid;
      }
    }
    
    // Notifications collection
    match /notifications/{userId} {
      allow read: if isOwner(userId);
      allow write: if isAuthenticated();
      
      match /items/{notificationId} {
        allow read: if isOwner(userId);
        allow create: if isAuthenticated();
        allow update: if isOwner(userId);
      }
    }
    
    // User presence/status
    match /status/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId);
    }
    
    // Search indices (if implementing search)
    match /search_index/{document=**} {
      allow read: if isAuthenticated();
      allow write: if false; // Only server-side writes
    }
    
    // Reports/Moderation
    match /reports/{reportId} {
      allow create: if isAuthenticated() && 
        request.resource.data.reporterId == request.auth.uid;
      allow read: if false; // Admin only
    }
    
    // Block list
    match /blocks/{userId} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId);
      
      match /blocked_users/{blockedId} {
        allow read: if isOwner(userId);
        allow write: if isOwner(userId);
      }
    }
    
    // Global settings/config (read-only for users)
    match /config/{document=**} {
      allow read: if isAuthenticated();
      allow write: if false; // Admin only
    }

    // User intents collection - AI-powered intent matching
    match /user_intents/{intentId} {
      // Anyone authenticated can read intents (for matching)
      allow read: if isAuthenticated();

      // Users can create their own intents
      allow create: if isAuthenticated() &&
        request.resource.data.userId == request.auth.uid;

      // Users can update/delete their own intents
      allow update, delete: if isAuthenticated() &&
        resource.data.userId == request.auth.uid;
    }

    // Legacy intents collection (for compatibility)
    match /intents/{intentId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() &&
        request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAuthenticated() &&
        resource.data.userId == request.auth.uid;
    }

    // AI posts collection
    match /ai_posts/{postId} {
      // Anyone authenticated can read posts (for matching)
      allow read: if isAuthenticated();

      // Users can create/update/delete their own posts
      allow create: if isAuthenticated() &&
        request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAuthenticated() &&
        resource.data.userId == request.auth.uid;
    }
  }
}